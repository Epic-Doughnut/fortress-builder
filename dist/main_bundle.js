(()=>{var e,r={5367:(e,r,t)=>{const o=t(8687),n=new o.Application({background:"#1099bb",resizeTo:window});document.body.appendChild(n.view);const i=[];for(let e=0;e<22;e++)for(let r=0;r<49;r++){const t={x:16*r,y:16*e,width:16,height:16};i.push(t)}const a=o.Sprite.from("https://pixijs.com/assets/bunny.png"),d=i[0],s=o.Texture.from("assets/colored-transparent_packed.png",{x:d.x,y:d.y,width:d.width,height:d.height}),l=o.Sprite.from(s);n.stage.addChild(a),n.stage.addChild(l),console.log("asaasda",a);let c=0;n.ticker.add((e=>{c+=e,a.x=100+100*Math.cos(c/50)}))},4654:()=>{}},t={};function o(e){var n=t[e];if(void 0!==n)return n.exports;var i=t[e]={id:e,loaded:!1,exports:{}};return r[e].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}o.m=r,e=[],o.O=(r,t,n,i)=>{if(!t){var a=1/0;for(c=0;c<e.length;c++){for(var[t,n,i]=e[c],d=!0,s=0;s<t.length;s++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](t[s])))?t.splice(s--,1):(d=!1,i<a&&(a=i));if(d){e.splice(c--,1);var l=n();void 0!==l&&(r=l)}}return r}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[t,n,i]},o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e={179:0};o.O.j=r=>0===e[r];var r=(r,t)=>{var n,i,[a,d,s]=t,l=0;if(a.some((r=>0!==e[r]))){for(n in d)o.o(d,n)&&(o.m[n]=d[n]);if(s)var c=s(o)}for(r&&r(t);l<a.length;l++)i=a[l],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(c)},t=self.webpackChunkfortress_builder=self.webpackChunkfortress_builder||[];t.forEach(r.bind(null,0)),t.push=r.bind(null,t.push.bind(t))})();var n=o.O(void 0,[687],(()=>o(5367)));n=o.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,